{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.namespace.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","TimepickerUtils","AM","PM","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isBetween","before","after","TimeAdapter","parseTime","indexOf","period","trim","substr","toUpperCase","_a","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","split","h","isPM","TimePeriod","parseInt","formatTime","format","timeFormat","TimeFormat","DateTime","fromFormat","toFormat","toLowerCase","convertTimeToDateTime","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","Error","isAfter","isBefore","formatHour","currentHour","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","defineProperty","defaultTime","toJSDate","fromJSDate","isValid","getHours","getMinutes","resetTime","asObservable","setDefaultTimeIfAvailable","console","getFullTime","getValue","Injectable","args","providedIn","HOUR","MINUTE","TimepickerTime","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","dispatchEvent","event","type","ENTER","LEAVE","NgxMaterialTimepickerComponent","timepickerService","eventService","_this","timeUnit","TimeUnit","activeTimeUnit","isOpened","isEsc","timeSet","EventEmitter","opened","closed","hourSelected","subscriptions","merge","backdropClick","keydownEvent","pipe","filter","keyCode","subscribe","close","_minutesGap","gap","Math","floor","setDefaultTime","timepickerInput","disabled","ngOnInit","selectedHour","selectedMinute","selectedPeriod","registerInput","input","onHourChange","onHourSelected","changeTimeUnit","onMinuteChange","changePeriod","setTime","open","animationState","AnimationState","animationDone","phaseName","toState","onKeydown","stopPropagation","ngOnDestroy","forEach","subscription","unsubscribe","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","Input","Output","ViewChild","HostListener","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","undefined","timepicker","ContentChild","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_format","_value","timepickerSubscriptions","onTouched","onChange","_min","_max","picker","registerTimepicker","updateInputValue","_timepicker","warn","onInput","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","nativeElement","host","[disabled]","(input)","(blur)","ElementRef","NgxMaterialTimepickerThemeDirective","element","ngAfterViewInit","theme","setTheme","val","prop","setProperty","replace","fill","map","v","disableHours","hours","config","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","minTime","maxTime","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","countAngleByCords","x0","y0","x","y","currentAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","onMouseup","isHourSelected","isClockFaceDisabled","isMinuteSelected","removeTouchEvents","touchStartHandler","bind","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","every","availableTime","sqrt","pow","changeDetection","ChangeDetectionStrategy","OnPush","step","round","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeFormatterPipe","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeChanged","focused","unfocused","timeList","isEditable","firstChange","saveTimeAndChangeTimeUnit","previousTime","updateTime","onKeyDown","char","String","fromCharCode","isInputAllowed","isTimeDisabledToChange","nextTime","test","isTimeUnavailable","changeTimeByArrow","some","ctrlKey","metaKey","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","StyleSanitizerPipe","domSanitizer","bypassSecurityTrustStyle","DomSanitizer","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","document","activeElement","isFocusActive","focus","Optional","Inject","DOCUMENT","NgxMaterialTimepickerModule","NgModule","imports","CommonModule","FormsModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { DateTime } from 'luxon';\n\nexport namespace TimepickerUtils {\n\n    export function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n        if (unit === 'hours') {\n            return time.hour >= compareWith.hour;\n        }\n        if (unit === 'minutes') {\n            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n        }\n    }\n\n    export function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n        if (unit === 'hours') {\n            return time.hour <= compareWith.hour;\n        }\n        if (unit === 'minutes') {\n            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n        }\n    }\n\n    export function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n        if (unit === 'hours') {\n            return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n        }\n        if (unit === 'minutes') {\n            return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n        }\n    }\n}\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWENTY_FOUR = 'HH:mm'\n}\n","import { DateTime } from 'luxon';\n\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimepickerUtils } from '../utils/timepicker.utils';\n\n// @dynamic\nexport class TimeAdapter {\n\n    static parseTime(time: string): string {\n        if (time.indexOf(':') === -1) {\n            return 'Invalid time';\n        }\n        let period = time.trim().substr(time.length - 2).toUpperCase();\n\n        const [h, m] = time.split(':');\n        const isPM = +h > 12;\n        const isPeriodValid = period === TimePeriod.AM || period === TimePeriod.PM;\n        const hours = isPM ? +h - 12 : +h;\n\n        period = isPeriodValid ? period : isPM ? TimePeriod.PM : TimePeriod.AM;\n\n        return `${hours}:${parseInt(m, 10)} ${period}`;\n    }\n\n    static formatTime(time: string, format = 12): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n        return DateTime.fromFormat(this.parseTime(time), 'h:m a').toFormat(timeFormat).toLowerCase();\n    }\n\n    static convertTimeToDateTime(time: string): DateTime {\n        return DateTime.fromFormat(this.parseTime(time), 'h:m a');\n    }\n\n    static isTimeAvailable(time: string, min?: DateTime, max?: DateTime, granularity?: 'hours' | 'minutes', minutesGap?: number): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.convertTimeToDateTime(time);\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && (minutes % minutesGap !== 0)) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && TimepickerUtils.isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && TimepickerUtils.isSameOrBefore(convertedTime, max, granularity);\n        const isBetween = (min && max)\n            && TimepickerUtils.isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || isBetween || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n    private set defaultTime(time: string) {\n        const defaultTime = TimeAdapter.convertTimeToDateTime(time).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n\n            this.hour = {...DEFAULT_HOUR, time: period === TimePeriod.PM ? defaultTime.getHours() - 12 : defaultTime.getHours()};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n        } else {\n            this.resetTime();\n        }\n    }\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        this.periodSubject.next(period);\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.defaultTime = TimeAdapter.formatTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const hour = this.hourSubject.getValue().time;\n        const minute = this.minuteSubject.getValue().time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable();\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable();\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\nexport namespace TimepickerTime {\n\n    export function getHours(format: number): ClockFaceTime[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n                };\n            });\n        }\n        return hours;\n    }\n\n    export function getMinutes(gap = 1): ClockFaceTime[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n        return minutes;\n    }\n\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n        if (config.min || config.max) {\n\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n                };\n            });\n        }\n        return minutes;\n    }\n}\n","import { Component, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { ClockFaceTime } from './models/clock-face-time.interface';\nimport { TimePeriod } from './models/time-period.enum';\nimport { merge, Subscription } from 'rxjs';\nimport { NgxMaterialTimepickerService } from './services/ngx-material-timepicker.service';\nimport { TimeUnit } from './models/time-unit.enum';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    templateUrl: './ngx-material-timepicker.component.html',\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\n\n    selectedHour: ClockFaceTime;\n    selectedMinute: ClockFaceTime;\n    selectedPeriod: TimePeriod;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    isOpened = false;\n    animationState: AnimationState;\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Input()\n    set defaultTime(time: string) {\n        this.setDefaultTime(time);\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    @ViewChild('timepickerww') timepickerComponent: ElementRef;\n\n    private _minutesGap: number;\n    private timepickerInput: TimepickerDirective;\n    private subscriptions: Subscription[] = [];\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService) {\n\n        this.subscriptions.push(merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .subscribe(() => this.close()));\n\n    }\n\n    get minTime(): string | DateTime {\n        return this.timepickerInput && this.timepickerInput.min;\n    }\n\n    get maxTime(): string | DateTime {\n        return this.timepickerInput && this.timepickerInput.max;\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get format(): number {\n        return this.timepickerInput && this.timepickerInput.format;\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(this.timepickerService.selectedHour\n            .subscribe(hour => this.selectedHour = hour));\n\n        this.subscriptions.push(this.timepickerService.selectedMinute\n            .subscribe(minute => this.selectedMinute = minute));\n\n        this.subscriptions.push(this.timepickerService.selectedPeriod\n            .subscribe(period => this.selectedPeriod = period));\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n    }\n\n    onHourSelected(hour: number): void {\n        this.changeTimeUnit(TimeUnit.MINUTE);\n        this.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime as DateTime, this.maxTime as DateTime, this.format, this.minutesGap);\n    }\n\n    open(): void {\n        this.isOpened = true;\n        this.animationState = AnimationState.ENTER;\n        this.opened.next();\n    }\n\n    close(): void {\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.isOpened = false;\n            this.activeTimeUnit = TimeUnit.HOUR;\n            this.closed.next();\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: KeyboardEvent) {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\n\nconst VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line\n    useExisting: forwardRef(() => TimepickerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [VALUE_ACCESSOR],\n    host: {\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.convertTimeToDateTime(value);\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.convertTimeToDateTime(value);\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, this._format);\n        if (TimeAdapter.isTimeAvailable(time, <DateTime>this._min, <DateTime>this._max, 'minutes', this._timepicker.minutesGap)) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        return this._value;\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef) {\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.setDefaultTime(time);\n    }\n\n    onInput(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        this.defaultTime = value;\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this._value);\n                this.onTouched();\n            }));\n            this.timepickerSubscriptions.push(\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimepickerTime } from '../../utils/timepicker-time.namespace';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = TimepickerTime.getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import {AfterContentInit, Component} from '@angular/core';\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport {TimepickerTime} from '../../utils/timepicker-time.namespace';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = TimepickerTime.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport {TimepickerTime} from '../../utils/timepicker-time.namespace';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = TimepickerTime.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimepickerTime } from '../../utils/timepicker-time.namespace';\nimport { DateTime } from 'luxon';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\n            this.minutesList = TimepickerTime.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace') clockFace: ElementRef;\n    @ViewChild('clockHand') clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: MouseEvent | Touch): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\n        const roundedAngle = isInnerClockChosen\n            ? roundAngle(circleAngle, angleStep) + 360\n            : roundAngle(circleAngle, angleStep);\n        const angle = roundedAngle === 0 ? 360 : roundedAngle;\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    isHourSelected(hour: number): boolean {\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\n    }\n\n    isMinuteSelected(minute: number): boolean {\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, TemplateRef } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimepickerTime } from '../../utils/timepicker-time.namespace';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime } from 'luxon';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = TimepickerTime.getHours(this.format);\n\n            this.hours = TimepickerTime.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\n\n            this.minutes = TimepickerTime.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number, timeUnit: TimeUnit): any {\n        if (time === undefined) {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimeFormatterPipe } from '../../pipes/time-formatter.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\n})\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\n            if (this.isEditable && !changes['time'].firstChange) {\n                return;\n            }\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    formatTime(): void {\n        if (this.isEditable) {\n            const time = this.time || this.previousTime;\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\n            this.unfocused.next();\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        const char = String.fromCharCode(e.keyCode);\n\n\n        if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n\n        if (isInputAllowed(e)) {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isInputAllowed(e: KeyboardEvent): boolean {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimepickerTime } from '../../utils/timepicker-time.namespace';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return TimepickerTime.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return TimepickerTime.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Pipe({\n    name: 'styleSanitizer'\n})\nexport class StyleSanitizerPipe implements PipeTransform {\n\n    constructor(private domSanitizer: DomSanitizer) {\n    }\n\n    transform(value: string): any {\n        if (!value) {\n            return value;\n        }\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: MouseEvent) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus());\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus());\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent\n} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent\n} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { StyleSanitizerPipe } from './pipes/style-sanitizer.pipe';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        StyleSanitizerPipe,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective\n    ]\n})\nexport class NgxMaterialTimepickerModule {\n}\n"]}